eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljLXByb2R1Y3QgcmVwbzoKIyAkIGV4cG9ydCBEUk9ORV9TRVJWRVI9aHR0cHM6Ly9jaS52Y25hLmlvCiMgJCBleHBvcnQgRFJPTkVfVE9LRU49PHRva2VuPgojICQgZHJvbmUgc2lnbiB2bXdhcmUvdmljLXByb2R1Y3QKIyBUaGUgc2VjcmV0cyBmaWxlIGlzIGluIG91ciBsb2NhbCBnaXQgcmVwby4gIEFzayBtaGFnZW4gZm9yIGFjY2Vzcy4KLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljLXByb2R1Y3QKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICB0YWdzOiB0cnVlCiAgICByZWN1cnNpdmU6IGZhbHNlCgogIGRjaC1idWlsZDoKICAgIGVudmlyb25tZW50OgogICAgICBET0NLRVJfSE9TVDogdGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGltYWdlOiBkb2NrZXI6bGF0ZXN0CiAgICBwdWxsOiB0cnVlCiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcHMKICAgICAgLSBhcGsgYWRkIC0tdXBkYXRlIGJhc2ggZ2l0CiAgICAgIC0gZGludi9jaS5zaCBidWlsZAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGV2ZW50OiBbIHB1c2gsIHB1bGxfcmVxdWVzdCwgdGFnLCBkZXBsb3ltZW50IF0KCiAgZGNoLXB1c2g6CiAgICBlbnZpcm9ubWVudDoKICAgICAgRE9DS0VSX0hPU1Q6IHRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBpbWFnZTogZG9ja2VyOmxhdGVzdAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIHBzCiAgICAgIC0gYXBrIGFkZCAtLXVwZGF0ZSBiYXNoIGdpdAogICAgICAtIGRpbnYvY2kuc2ggcHVzaAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgZGVwbG95bWVudCBdCgogIHVuaWZpZWQtb3ZhLWJ1aWxkOgogICAgaW1hZ2U6IGdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtcHJvZHVjdC1idWlsZDpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBBRE1JUkFMOiAke0FETUlSQUx9CiAgICAgIEJVSUxEX0FETUlSQUxfUkVMRUFTRTogJHtCVUlMRF9BRE1JUkFMX1JFTEVBU0V9CiAgICAgIEJVSUxEX1ZJQ0VOR0lORV9SRVZJU0lPTjogJHtCVUlMRF9WSUNFTkdJTkVfUkVWSVNJT059CiAgICAgIERST05FX0JVSUxEX05VTUJFUjogJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgIERST05FX1RJTUVPVVQ6ICR7RFJPTkVfVElNRU9VVH0KICAgICAgRFJPTkVfVElNRU9VVF9JTkFDVElWSVRZOiAke0RST05FX1RJTUVPVVRfSU5BQ1RJVklUWX0KICAgICAgSEFSQk9SOiAke0hBUkJPUn0KICAgICAgVEVSTTogeHRlcm0KICAgICAgVklDRU5HSU5FOiAke1ZJQ0VOR0lORX0KICAgIHZvbHVtZXM6CiAgICAgIC0gL2RldjovZGV2CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIGluc3RhbGxlci9zY3JpcHRzL2NpLWJ1aWxkLnNoCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgZXZlbnQ6IFsgcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWcsIGRlcGxveW1lbnQgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBpbnRlZ3JhdGlvbi10ZXN0OgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L3ZpYy1pbnRlZ3JhdGlvbi10ZXN0OjEuMzYKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBCSU46IGJpbgogICAgICBHT1BBVEg6IC9nbwogICAgICBHU19DTElFTlRfRU1BSUw6ICR7R1NfQ0xJRU5UX0VNQUlMfQogICAgICBHU19QUk9KRUNUX0lEOiAke0dTX1BST0pFQ1RfSUR9CiAgICAgIEdTX1BSSVZBVEVfS0VZOiAke0dTX1BSSVZBVEVfS0VZfQogICAgICBQVUJMSUNfTkVUV09SSzogJHtQVUJMSUNfTkVUV09SS30KICAgICAgU0hFTEw6IC9iaW4vYmFzaAogICAgICBURVNUX0RBVEFTVE9SRTogJHtURVNUX0RBVEFTVE9SRX0KICAgICAgVEVTVF9QQVNTV09SRDogJHtURVNUX1BBU1NXT1JEfQogICAgICBURVNUX1JFU09VUkNFOiAke1RFU1RfUkVTT1VSQ0V9CiAgICAgIFRFU1RfVVJMOiAke1RFU1RfVVJMfQogICAgICBURVNUX1VTRVJOQU1FOiAke1RFU1RfVVNFUk5BTUV9CiAgICB2b2x1bWVzOgogICAgICAtIC90bXAKICAgIGNvbW1hbmRzOgogICAgICAtIHRlc3RzL3JvYm90LXJ1bi5zaAogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGV2ZW50OiBbIHB1c2gsIHB1bGxfcmVxdWVzdCwgdGFnLCBkZXBsb3ltZW50IF0KICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQogICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiAgYnVuZGxlOgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L2dvbGFuZzoxLjgKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIG1rZGlyIGJ1bmRsZQogICAgICAtIGNwIGluc3RhbGxlci9iaW4vdmljLSoub3ZhIGJ1bmRsZQogICAgICAtIGxzIC1hbCBidW5kbGUKICAgIHdoZW46CiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBwdWJsaXNoLWdjcy1idWlsZHM6CiAgICBpbWFnZTogdmljdGVzdC9kcm9uZS1nY3M6MQogICAgcHVsbDogdHJ1ZQogICAgc291cmNlOiBidW5kbGUKICAgIHRhcmdldDogdmljLXByb2R1Y3Qtb3ZhLWJ1aWxkcwogICAgYWNsOgogICAgICAtIGFsbFVzZXJzOlJFQURFUgogICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qIF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIHB1Ymxpc2gtZ2NzLXJlbGVhc2VzOgogICAgaW1hZ2U6IHZpY3Rlc3QvZHJvbmUtZ2NzOjEKICAgIHB1bGw6IHRydWUKICAgIHNvdXJjZTogYnVuZGxlCiAgICB0YXJnZXQ6IHZpYy1wcm9kdWN0LW92YS1yZWxlYXNlcwogICAgYWNsOgogICAgICAtIGFsbFVzZXJzOlJFQURFUgogICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBub3RpZnktc2xhY2stb24tZmFpbDoKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICB3ZWJob29rOiAke1NMQUNLX1VSTH0KICAgIHVzZXJuYW1lOiBkcm9uZQogICAgdGVtcGxhdGU6ID4KICAgICAgICBCdWlsZCB7eyBidWlsZC5saW5rIH19IGZhaWxlZCBmcm9tIHRoZSBldmVudCB7eyBidWlsZC5ldmVudCB9fSBieSB7eyBsb3dlcmNhc2UgYnVpbGQuYXV0aG9yIH19LgogICAgd2hlbjoKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KICAgICAgc3RhdHVzOiBbIGZhaWx1cmUgXQoKICBub3RpZnktc2xhY2s6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2ViaG9vazogJHtQUk9EVUNUX1NMQUNLX1VSTH0KICAgIHVzZXJuYW1lOiBkcm9uZQogICAgdGVtcGxhdGU6ID4KICAgICAgICBCdWlsZCAne3sgYnVpbGQubGluayB9fScgY29tcGxldGVkIHdpdGggYSAne3sgYnVpbGQuc3RhdHVzIH19JyBzdGF0dXMgZnJvbSB0aGUgZXZlbnQgJ3t7IGJ1aWxkLmV2ZW50IH19JyBieSAne3sgbG93ZXJjYXNlIGJ1aWxkLmF1dGhvciB9fScKICAgIHdoZW46CiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0KCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOmRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIHB1bGw6IHRydWUK.liifVqXliD8wpLhOXDV7kUsnGElL_kNokafD2YI9_M4