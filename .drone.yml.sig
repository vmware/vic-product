eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljLXByb2R1Y3QgcmVwbzoKIyAkIGV4cG9ydCBEUk9ORV9TRVJWRVI9aHR0cHM6Ly9jaS52Y25hLmlvCiMgJCBleHBvcnQgRFJPTkVfVE9LRU49PHRva2VuPgojICQgZHJvbmUgc2lnbiB2bXdhcmUvdmljLXByb2R1Y3QKIyBUaGUgc2VjcmV0cyBmaWxlIGlzIGluIG91ciBsb2NhbCBnaXQgcmVwby4gIEFzayBtaGFnZW4gZm9yIGFjY2Vzcy4KLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljLXByb2R1Y3QKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICB0YWdzOiB0cnVlCiAgICByZWN1cnNpdmU6IGZhbHNlCgojICBkY2gtYnVpbGQ6CiMgICAgZW52aXJvbm1lbnQ6CiMgICAgICBET0NLRVJfSE9TVDogdGNwOi8vMTI3LjAuMC4xOjIzNzUKIyAgICBpbWFnZTogZG9ja2VyOmxhdGVzdAojICAgIHB1bGw6IHRydWUKIyAgICBjb21tYW5kczoKIyAgICAgIC0gZG9ja2VyIHBzCiMgICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKIyAgICAgIC0gZGludi9jaS5zaCBidWlsZAojICAgIHdoZW46CiMgICAgICBicmFuY2g6IG1hc3RlcgojICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiMgICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudCBdCiMKIyAgZGNoLXB1c2g6CiMgICAgZW52aXJvbm1lbnQ6CiMgICAgICBET0NLRVJfSE9TVDogdGNwOi8vMTI3LjAuMC4xOjIzNzUKIyAgICBpbWFnZTogZG9ja2VyOmxhdGVzdAojICAgIHB1bGw6IHRydWUKIyAgICBjb21tYW5kczoKIyAgICAgIC0gZG9ja2VyIHBzCiMgICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKIyAgICAgIC0gZGludi9jaS5zaCBwdXNoCiMgICAgd2hlbjoKIyAgICAgIGJyYW5jaDogbWFzdGVyCiMgICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKIyAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgZGVwbG95bWVudCBdCgogIHVuaWZpZWQtb3ZhLWJ1aWxkOgogICAgaW1hZ2U6IGdjci5pby9lbWluZW50LW5hdGlvbi04NzMxNy92aWMtcHJvZHVjdC1idWlsZDpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICBBRE1JUkFMOiAke0FETUlSQUx9CiAgICAgIEJVSUxEX0FETUlSQUxfUkVMRUFTRTogJHtCVUlMRF9BRE1JUkFMX1JFTEVBU0V9CiAgICAgIEJVSUxEX1ZJQ0VOR0lORV9SRVZJU0lPTjogJHtCVUlMRF9WSUNFTkdJTkVfUkVWSVNJT059CiAgICAgIERST05FX0JVSUxEX05VTUJFUjogJHtEUk9ORV9CVUlMRF9OVU1CRVJ9CiAgICAgIERST05FX1RJTUVPVVQ6ICR7RFJPTkVfVElNRU9VVH0KICAgICAgRFJPTkVfVElNRU9VVF9JTkFDVElWSVRZOiAke0RST05FX1RJTUVPVVRfSU5BQ1RJVklUWX0KICAgICAgSEFSQk9SOiAke0hBUkJPUn0KICAgICAgVEVSTTogeHRlcm0KICAgICAgVklDX01BQ0hJTkVfU0VSVkVSOiAke1ZJQ19NQUNISU5FX1NFUlZFUn0KICAgICAgVklDRU5HSU5FOiAke1ZJQ0VOR0lORX0KICAgIHZvbHVtZXM6CiAgICAgIC0gL2RldjovZGV2CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIGVjaG8gIkFETUlSQUwgJEFETUlSQUwiCiAgICAgIC0gZWNobyAiVklDRU5HSU5FICRWSUNFTkdJTkUiCiAgICAgIC0gZWNobyAiVklDX01BQ0hJTkVfU0VSVkVSICRWSUNfTUFDSElORV9TRVJWRVIiCiAgICAgIC0gZWNobyAiSEFSQk9SICRIQVJCT1IiCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgZXZlbnQ6IFsgcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWcsIGRlcGxveW1lbnQgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKIyAgaW50ZWdyYXRpb24tdGVzdDoKIyAgICBpbWFnZTogaGFyYm9yLmNpLmRyb25lLmxvY2FsL2xpYnJhcnkvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zNgojICAgIHB1bGw6IHRydWUKIyAgICBlbnZpcm9ubWVudDoKIyAgICAgIEJJTjogYmluCiMgICAgICBHT1BBVEg6IC9nbwojICAgICAgR1NfQ0xJRU5UX0VNQUlMOiAke0dTX0NMSUVOVF9FTUFJTH0KIyAgICAgIEdTX1BST0pFQ1RfSUQ6ICR7R1NfUFJPSkVDVF9JRH0KIyAgICAgIEdTX1BSSVZBVEVfS0VZOiAke0dTX1BSSVZBVEVfS0VZfQojICAgICAgUFVCTElDX05FVFdPUks6ICR7UFVCTElDX05FVFdPUkt9CiMgICAgICBTSEVMTDogL2Jpbi9iYXNoCiMgICAgICBURVNUX0RBVEFTVE9SRTogJHtURVNUX0RBVEFTVE9SRX0KIyAgICAgIFRFU1RfUEFTU1dPUkQ6ICR7VEVTVF9QQVNTV09SRH0KIyAgICAgIFRFU1RfUkVTT1VSQ0U6ICR7VEVTVF9SRVNPVVJDRX0KIyAgICAgIFRFU1RfVVJMOiAke1RFU1RfVVJMfQojICAgICAgVEVTVF9VU0VSTkFNRTogJHtURVNUX1VTRVJOQU1FfQojICAgIHZvbHVtZXM6CiMgICAgICAtIC90bXAKIyAgICBjb21tYW5kczoKIyAgICAgIC0gdGVzdHMvcm9ib3QtcnVuLnNoCiMgICAgd2hlbjoKIyAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAojICAgICAgZXZlbnQ6IFsgcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWcsIGRlcGxveW1lbnQgXQojICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQojICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIGJ1bmRsZS1kZXYtYnVpbGRzOgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L2dvbGFuZzoxLjgKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGVjaG8gRFJPTkVfQlVJTERfTlVNQkVSICREUk9ORV9CVUlMRF9OVU1CRVIKICAgIHdoZW46CiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlcy8qLCByZWZzL3RhZ3MvKiBdCiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBidW5kbGUtc3RhZ2UtYnVpbGRzOgogICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L2dvbGFuZzoxLjgKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGVjaG8gRFJPTkVfQlVJTERfTlVNQkVSICREUk9ORV9CVUlMRF9OVU1CRVIKICAgIHdoZW46CiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBldmVudDogWyBkZXBsb3ltZW50IF0KICAgICAgZW52aXJvbm1lbnQ6IFsgc3RhZ2luZyBdCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KICAgICAgc3RhdHVzOiBzdWNjZXNzCgogIGJ1bmRsZS1yZWxlYXNlLWJ1aWxkczoKICAgIGltYWdlOiBoYXJib3IuY2kuZHJvbmUubG9jYWwvbGlicmFyeS9nb2xhbmc6MS44CiAgICBwdWxsOiB0cnVlCiAgICBjb21tYW5kczoKICAgICAgLSBlY2hvIERST05FX0JVSUxEX05VTUJFUiAkRFJPTkVfQlVJTERfTlVNQkVSCiAgICB3aGVuOgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgZXZlbnQ6IFsgZGVwbG95bWVudCBdCiAgICAgIGVudmlyb25tZW50OiBbIHJlbGVhc2UgXQogICAgICBicmFuY2g6IFsgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQogICAgICBzdGF0dXM6IHN1Y2Nlc3MKCiMgIHB1Ymxpc2gtZ2NzLWJ1aWxkczoKIyAgICBpbWFnZTogdmljdGVzdC9kcm9uZS1nY3M6MQojICAgIHB1bGw6IHRydWUKIyAgICBzb3VyY2U6IGJ1bmRsZS1kZXYtYnVpbGRzCiMgICAgdGFyZ2V0OiB2aWMtcHJvZHVjdC1vdmEtYnVpbGRzCiMgICAgYWNsOgojICAgICAgLSBhbGxVc2VyczpSRUFERVIKIyAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiMgICAgd2hlbjoKIyAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAojICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBkZXBsb3ltZW50IF0KIyAgICAgIGVudmlyb25tZW50OiBbIHN0YWdpbmcgXQojICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQojICAgICAgc3RhdHVzOiBzdWNjZXNzCiMKIyAgcHVibGlzaC1nY3MtcmVsZWFzZXM6CiMgICAgaW1hZ2U6IHZpY3Rlc3QvZHJvbmUtZ2NzOjEKIyAgICBwdWxsOiB0cnVlCiMgICAgc291cmNlOiBidW5kbGUtcmVsZWFzZS1idWlsZHMKIyAgICB0YXJnZXQ6IHZpYy1wcm9kdWN0LW92YS1yZWxlYXNlcwojICAgIGFjbDoKIyAgICAgIC0gYWxsVXNlcnM6UkVBREVSCiMgICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAojICAgIHdoZW46CiMgICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKIyAgICAgIGV2ZW50OiBbIGRlcGxveW1lbnQgXQojICAgICAgZW52aXJvbm1lbnQ6IFsgcmVsZWFzZSBdCiMgICAgICBicmFuY2g6IFsgcmVsZWFzZXMvKiwgcmVmcy90YWdzLyogXQojICAgICAgc3RhdHVzOiBzdWNjZXNzCiMKIyAgbm90aWZ5LXNsYWNrLW9uLWZhaWw6CiMgICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKIyAgICB3ZWJob29rOiAke1NMQUNLX1VSTH0KIyAgICB1c2VybmFtZTogZHJvbmUKIyAgICB0ZW1wbGF0ZTogPgojICAgICAgICBCdWlsZCB7eyBidWlsZC5saW5rIH19IGZhaWxlZCBmcm9tIHRoZSBldmVudCB7eyBidWlsZC5ldmVudCB9fSBieSB7eyBsb3dlcmNhc2UgYnVpbGQuYXV0aG9yIH19LgojICAgIHdoZW46CiMgICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKIyAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KIyAgICAgIHN0YXR1czogWyBmYWlsdXJlIF0KIwojICBub3RpZnktc2xhY2s6CiMgICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKIyAgICB3ZWJob29rOiAke1BST0RVQ1RfU0xBQ0tfVVJMfQojICAgIHVzZXJuYW1lOiBkcm9uZQojICAgIHRlbXBsYXRlOiA-CiMgICAgICAgIEJ1aWxkICd7eyBidWlsZC5saW5rIH19JyBjb21wbGV0ZWQgd2l0aCBhICd7eyBidWlsZC5zdGF0dXMgfX0nIHN0YXR1cyBmcm9tIHRoZSBldmVudCAne3sgYnVpbGQuZXZlbnQgfX0nIGJ5ICd7eyBsb3dlcmNhc2UgYnVpbGQuYXV0aG9yIH19JwojICAgIHdoZW46CiMgICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKIyAgICAgIGJyYW5jaDogWyBtYXN0ZXIsIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KIyAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0KIwojICBub3RpZnktc2xhY2stb24tc3VjY2Vzc2Z1bC1yZWxlYXNlOgojICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiMgICAgd2ViaG9vazogJHtQUk9EVUNUX1NMQUNLX1VSTH0KIyAgICB1c2VybmFtZTogZHJvbmUKIyAgICB0ZW1wbGF0ZTogPgojICAgICAgVGhlIGxhdGVzdCB2ZXJzaW9uIG9mIFZJQyBPVkEgaGFzIGJlZW4gcmVsZWFzZWQsIGZpbmQgdGhlIGJ1aWxkIGhlcmU6IGh0dHBzOi8vY29uc29sZS5jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvYnJvd3Nlci92aWMtcHJvZHVjdC1vdmEtcmVsZWFzZXMKIyAgICB3aGVuOgojICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiMgICAgICBldmVudDogWyBkZXBsb3ltZW50IF0KIyAgICAgIGVudmlyb25tZW50OiBbIHJlbGVhc2UgXQojICAgICAgYnJhbmNoOiBbIHJlbGVhc2VzLyosIHJlZnMvdGFncy8qIF0KIyAgICAgIHN0YXR1czogWyBzdWNjZXNzIF0KCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOmRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIHB1bGw6IHRydWUK.AsouZfQ_TloMSRAVN7WvA6P-40NcLiGAEu_Aw2q5L2w