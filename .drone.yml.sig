eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljLXByb2R1Y3QgcmVwbzoKIyAkIGV4cG9ydCBEUk9ORV9TRVJWRVI9aHR0cHM6Ly9jaS52Y25hLmlvCiMgJCBleHBvcnQgRFJPTkVfVE9LRU49PHRva2VuPgojICQgZHJvbmUgc2lnbiB2bXdhcmUvdmljLXByb2R1Y3QKIyBUaGUgc2VjcmV0cyBmaWxlIGlzIGluIG91ciBsb2NhbCBnaXQgcmVwby4gIEFzayBtaGFnZW4gZm9yIGFjY2Vzcy4KLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljLXByb2R1Y3QKICAgIApwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgdGFnczogdHJ1ZQogICAgcmVjdXJzaXZlOiBmYWxzZQoKICBkaW52LWJ1aWxkOgogICAgZW52aXJvbm1lbnQ6CiAgICAgIERPQ0tFUl9IT1NUOiB0Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgaW1hZ2U6IGRvY2tlcjpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBwcwogICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKICAgICAgLSBkaW52L2NpLnNoIGJ1aWxkCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgZXZlbnQ6IFtwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudF0KCiAgZGludi1wdXNoOgogICAgZW52aXJvbm1lbnQ6CiAgICAgIERPQ0tFUl9IT1NUOiB0Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgaW1hZ2U6IGRvY2tlcjpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBwcwogICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKICAgICAgLSBkaW52L2NpLnNoIHB1c2gKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBldmVudDogW3B1c2gsIHRhZywgZGVwbG95bWVudF0KCiMgcGlwZWxpbmU6CiMgICBjbG9uZToKIyAgICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiMgICAgIHRhZ3M6IHRydWUKIyAgICAgcmVjdXJzaXZlOiBmYWxzZQoKIyAgIHVuaWZpZWQtb3ZhLWJ1aWxkOgojICAgICBpbWFnZTogaGFyYm9yLmNpLmRyb25lLmxvY2FsL2xpYnJhcnkvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zMgojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIEJJTjogYmluCiMgICAgICAgR09QQVRIOiAvZ28KIyAgICAgICBTSEVMTDogL2Jpbi9iYXNoCiMgICAgICAgUEFDS0VSX0VTWF9IT1NUOiBidWlsZHMtMjUudmNuYS5pbwojICAgICAgIFBBQ0tFUl9VU0VSOiByb290CiMgICAgICAgUEFDS0VSX1BBU1NXT1JEOiB2bXdhcmUxCiMgICAgICAgQlVJTERfVklDRU5HSU5FX1JFVklTSU9OOiAxLjEuMQojICAgICBjb21tYW5kczoKIyAgICAgICAtIGNkIGluc3RhbGxlci8KIyAgICAgICAtIHNjcmlwdHMvYnVpbGQuc2gKCiMgICBidW5kbGU6CiMgICAgIGltYWdlOiBoYXJib3IuY2kuZHJvbmUubG9jYWwvbGlicmFyeS9nb2xhbmc6MS44CiMgICAgIHB1bGw6IHRydWUKIyAgICAgY29tbWFuZHM6CiMgICAgICAgLSBta2RpciBidW5kbGUKIyAgICAgICAtIGNwIGJpbi92aWMtKi5vdmEgYnVuZGxlCiMgICAgICAgLSBscyAtYWwgYnVuZGxlCgojICAgcHVibGlzaC1nY3MtYnVpbGRzOgojICAgICBpbWFnZTogbWFwbGFpbi9kcm9uZS1nY3M6bGF0ZXN0CiMgICAgIHB1bGw6IHRydWUKIyAgICAgc291cmNlOiBidW5kbGUKIyAgICAgdGFyZ2V0OiB2aWMtcHJvZHVjdC1vdmEtYnVpbGRzCiMgICAgIGFjbDoKIyAgICAgICAtIGFsbFVzZXJzOlJFQURFUgojICAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiMgICAgIHdoZW46CiMgICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiMgICAgICAgZXZlbnQ6IFsgcHVzaCBdCiMgICAgICAgYnJhbmNoOiBbIG1hc3RlciwgcmVsZWFzZXMvKiBdCiMgICAgICAgc3RhdHVzOiBzdWNjZXNzCgojICAgcHVibGlzaC1nY3MtcmVsZWFzZXM6CiMgICAgIGltYWdlOiBtYXBsYWluL2Ryb25lLWdjczpsYXRlc3QKIyAgICAgcHVsbDogdHJ1ZQojICAgICBzb3VyY2U6IGJ1bmRsZQojICAgICB0YXJnZXQ6IHZpYy1wcm9kdWN0LW92YS1yZWxlYXNlcwojICAgICBhY2w6CiMgICAgICAgLSBhbGxVc2VyczpSRUFERVIKIyAgICAgY2FjaGVfY29udHJvbDogcHVibGljLG1heC1hZ2U9MzYwMAojICAgICB3aGVuOgojICAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAojICAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZyBdCiMgICAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KIyAgICAgICBzdGF0dXM6IHN1Y2Nlc3MKCnNlcnZpY2VzOgogIGRpbmQ6CiAgICBpbWFnZTogZG9ja2VyOmRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIHB1bGw6IHRydWU.z9JX5X_457RnH1EVTCfc1HafRCXr613ZykatBhKMR_g