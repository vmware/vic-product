eyJhbGciOiJIUzI1NiJ9.# After any change to this file you MUST re-sign and checkin the .drone.yml.sig
# When you are ready to submit a pull request, you must regenerate .drone.yml.sig for the vmware/vic-product repo:
# $ export DRONE_SERVER=https://ci.vcna.io
# $ export DRONE_TOKEN=<token>
# $ drone sign vmware/vic-product
# The secrets file is in our local git repo.  Ask mhagen for access.
---
workspace:
  base: /go
  path: src/github.com/vmware/vic-product

pipeline:
  clone:
    image: plugins/git
    tags: true
    recursive: false
  clone-pr:
    image: harbor.ci.drone.local/library/git-clone:1.1
    pull: true
    environment:
      DRONE_PULL_REQUEST:  ${DRONE_PULL_REQUEST}
    when:
      event: [ pull_request ]

  display-status:
    image: harbor.ci.drone.local/library/vic-integration-test:1.42
    pull: true
    environment:
      BIN: bin
      SHELL: /bin/bash
      COMMIT: ${DRONE_COMMIT}
    commands:
      - echo "Expecting ${DRONE_COMMIT}"
      - git log -5
      - git log -1 --pretty=oneline | grep "^${DRONE_COMMIT}" > /dev/null && echo 'Build matches' || (git log -1 --pretty=oneline | grep "Merge ${DRONE_COMMIT}" > /dev/null && echo 'Build is of a merge commit' || (echo 'Build does not match!' && exit 1))

  dch-build:
    environment:
      DOCKER_HOST: tcp://127.0.0.1:2375
    image: docker:latest
    pull: true
    commands:
      - docker ps
      - apk add --update bash git
      - dinv/ci.sh build
    when:
      branch: master
      repo: vmware/vic-product
      event: [ push, tag, deployment ]
      status: success

  dch-push:
    environment:
      DOCKER_HOST: tcp://127.0.0.1:2375
    image: docker:latest
    pull: true
    commands:
      - docker ps
      - apk add --update bash git
      - dinv/ci.sh push
    when:
      branch: master
      repo: vmware/vic-product
      event: [ push, tag, deployment ]
      status: success

  unified-ova-build:
    image: gcr.io/eminent-nation-87317/vic-product-build:latest
    pull: true
    privileged: true
    environment:
      ADMIRAL: ${ADMIRAL}
      BUILD_ADMIRAL_RELEASE: ${BUILD_ADMIRAL_RELEASE}
      BUILD_VICENGINE_REVISION: ${BUILD_VICENGINE_REVISION}
      DRONE_BUILD_NUMBER: ${DRONE_BUILD_NUMBER}
      HARBOR: ${HARBOR}
      TERM: xterm
      VIC_MACHINE_SERVER: ${VIC_MACHINE_SERVER}
      VICENGINE: ${VICENGINE}
    volumes:
      - /dev:/dev
      - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - installer/scripts/ci-build.sh
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  integration-test-ova-setup:
    image: harbor.ci.drone.local/library/vic-integration-test:1.37
    pull: true
    privileged: true
    environment:
      BIN: bin
      GOPATH: /go
      PUBLIC_NETWORK: ${PUBLIC_NETWORK}
      SHELL: /bin/bash
      TEST_DATASTORE: ${TEST_DATASTORE}
      TEST_PASSWORD: ${TEST_PASSWORD}
      TEST_RESOURCE: ${TEST_RESOURCE}
      TEST_URL: ${TEST_URL}
      TEST_USERNAME: ${TEST_USERNAME}
    volumes:
      - /tmp
    commands:
      - pybot -d robot-logs/ova-setup-logs -s OVA-Setup tests/common-ova
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  integration-test:
    image: harbor.ci.drone.local/library/vic-integration-test:1.37
    pull: true
    privileged: true
    environment:
      BIN: bin
      GOPATH: /go
      PUBLIC_NETWORK: ${PUBLIC_NETWORK}
      SHELL: /bin/bash
      TEST_DATASTORE: ${TEST_DATASTORE}
      TEST_PASSWORD: ${TEST_PASSWORD}
      TEST_RESOURCE: ${TEST_RESOURCE}
      TEST_URL: ${TEST_URL}
      TEST_USERNAME: ${TEST_USERNAME}
      VCH_TIMEOUT: ${VCH_TIMEOUT}
    volumes:
      - /tmp
    commands:
      - tests/robot-run.sh
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  integration-test-ova-cleanup:
    image: harbor.ci.drone.local/library/vic-integration-test:1.37
    pull: true
    environment:
      BIN: bin
      GOPATH: /go
      PUBLIC_NETWORK: ${PUBLIC_NETWORK}
      SHELL: /bin/bash
      TEST_DATASTORE: ${TEST_DATASTORE}
      TEST_PASSWORD: ${TEST_PASSWORD}
      TEST_RESOURCE: ${TEST_RESOURCE}
      TEST_URL: ${TEST_URL}
      TEST_USERNAME: ${TEST_USERNAME}
    volumes:
      - /tmp
    commands:
      - pybot -d robot-logs/ova-cleanup-logs -s OVA-Cleanup tests/common-ova
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: [ success, failure ]

  bundle-logs:
    image: harbor.ci.drone.local/library/vic-integration-test:1.37
    pull: true
    environment:
      SHELL: /bin/bash
    commands:
      - copyfiles='cp -R test-screenshots robot-logs 2>/dev/null || :'
      - eval $copyfiles
      - mkdir robot-bundle
      - outfile="ova_integration_logs_"$DRONE_BUILD_NUMBER"_"$DRONE_COMMIT".zip"
      - zip -9 -r robot-bundle/$outfile robot-logs vic_appliance_logs*
      - ls -l
      - set +x
      - echo "Download test logs:"
      - echo "https://console.cloud.google.com/m/cloudstorage/b/vic-ci-logs/o/$outfile?authuser=1"
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: [ success, failure ]

  publish-logs:
    image: victest/drone-gcs:1
    pull: true
    source: robot-bundle
    target: vic-ci-logs
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic-product
      event: [ push, pull_request, tag, deployment ]
      branch: [ master, releases/*, refs/tags/* ]
      status: [ success, failure ]

  bundle-dev-builds:
    image: harbor.ci.drone.local/library/golang:1.8
    pull: true
    commands:
      - mkdir bundle
      - cd installer/bin
      - TMP=$(echo "$(ls -1t | grep "\.ova")" | sed "s/-/-dev-/")
      - echo "Passed build will have artifact at https://storage.googleapis.com/vic-product-ova-builds/$TMP"
      - echo "Renaming build artifact to $TMP..."
      - mv vic-*.ova ../../bundle/$TMP
      - ls -l ../../bundle
    when:
      repo: vmware/vic-product
      event: [ push, tag ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  bundle-stage-builds:
    image: harbor.ci.drone.local/library/golang:1.8
    pull: true
    commands:
      - mkdir bundle
      - cd installer/bin
      - TMP=$(echo "$(ls -1t | grep "\.ova")" | sed "s/-/-stage-/")
      - echo "Passed build will have artifact at https://storage.googleapis.com/vic-product-ova-builds/$TMP"
      - echo "Renaming build artifact to $TMP..."
      - mv vic-*.ova ../../bundle/$TMP
      - ls -l ../../bundle
    when:
      repo: vmware/vic-product
      event: [ deployment ]
      environment: [ staging ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  bundle-release-builds:
    image: harbor.ci.drone.local/library/golang:1.8
    pull: true
    commands:
      - mkdir bundle
      - cd installer/bin
      - TMP=$(echo vic-*.ova)
      - echo "Passed build will have artifact at https://storage.googleapis.com/vic-product-ova-releases/$TMP"
      - mv vic-*.ova ../../bundle/
      - ls -l ../../bundle
    when:
      repo: vmware/vic-product
      event: [ deployment ]
      environment: [ release ]
      branch: [ releases/*, refs/tags/* ]
      status: success

  publish-gcs-builds:
    image: victest/drone-gcs:1
    pull: true
    source: bundle
    target: vic-product-ova-builds
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic-product
      event: [ push, tag ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  publish-gcs-stage:
    image: victest/drone-gcs:1
    pull: true
    source: bundle
    target: vic-product-ova-builds
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic-product
      event: [ deployment ]
      environment: [ staging ]
      branch: [ master, releases/*, refs/tags/* ]
      status: success

  publish-gcs-releases:
    image: victest/drone-gcs:1
    pull: true
    source: bundle
    target: vic-product-ova-releases
    acl:
      - allUsers:READER
    cache_control: public,max-age=3600
    when:
      repo: vmware/vic-product
      event: [ deployment ]
      environment: [ release ]
      branch: [ releases/*, refs/tags/* ]
      status: success

  notify-slack-on-fail:
    image: plugins/slack
    webhook: ${SLACK_URL}
    username: drone
    template: >
        Build {{ build.link }} failed from the event {{ build.event }} by {{ lowercase build.author }}.
    when:
      repo: vmware/vic-product
      branch: [ master, releases/*, refs/tags/* ]
      status: [ failure ]

  notify-slack:
    image: plugins/slack
    webhook: ${PRODUCT_SLACK_URL}
    username: drone
    template: >
        Build '{{ build.link }}' completed with a '{{ build.status }}' status from the event '{{ build.event }}' by '{{ lowercase build.author }}'
    when:
      repo: vmware/vic-product
      branch: [ master, releases/*, refs/tags/* ]
      status: [ success, failure ]

  notify-slack-on-successful-release:
    image: plugins/slack
    webhook: ${PRODUCT_SLACK_URL}
    username: drone
    template: >
      The latest version of VIC OVA has been released, find the build here: https://console.cloud.google.com/storage/browser/vic-product-ova-releases
    when:
      repo: vmware/vic-product
      event: [ deployment ]
      environment: [ release ]
      branch: [ releases/*, refs/tags/* ]
      status: [ success ]

services:
  dind:
    image: docker:dind
    privileged: true
    pull: true

  selenium-grid-hub:
    image: selenium/hub:3.7.1
    ports:
      - "4444:4444"
    environment:
      - GRID_TIMEOUT=180000
      - GRID_BROWSER_TIMEOUT=180000

  selenium-node-firefox-1:
    image: selenium/node-firefox:3.7.1
    environment:
      SE_OPTS: "-port 4445"
      HUB_PORT_4444_TCP_ADDR: 127.0.0.1
      HUB_PORT_4444_TCP_PORT: 4444
      DISPLAY: ":97.0"

  selenium-node-firefox-2:
    image: selenium/node-firefox:3.7.1
    environment:
      SE_OPTS: "-port 4446"
      HUB_PORT_4444_TCP_ADDR: 127.0.0.1
      HUB_PORT_4444_TCP_PORT: 4444
      DISPLAY: ":98.0"

  selenium-node-firefox-3:
    image: selenium/node-firefox:3.7.1
    environment:
      SE_OPTS: "-port 4447"
      HUB_PORT_4444_TCP_ADDR: 127.0.0.1
      HUB_PORT_4444_TCP_PORT: 4444
      DISPLAY: ":99.0"
.LMFR-RzdDmy_Gm0lb7efHdWpJBYDkqQCgIFUW7aodts