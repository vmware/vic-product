eyJhbGciOiJIUzI1NiJ9.IyBBZnRlciBhbnkgY2hhbmdlIHRvIHRoaXMgZmlsZSB5b3UgTVVTVCByZS1zaWduIGFuZCBjaGVja2luIHRoZSAuZHJvbmUueW1sLnNpZwojIFdoZW4geW91IGFyZSByZWFkeSB0byBzdWJtaXQgYSBwdWxsIHJlcXVlc3QsIHlvdSBtdXN0IHJlZ2VuZXJhdGUgLmRyb25lLnltbC5zaWcgZm9yIHRoZSB2bXdhcmUvdmljLXByb2R1Y3QgcmVwbzoKIyAkIGV4cG9ydCBEUk9ORV9TRVJWRVI9aHR0cHM6Ly9jaS52Y25hLmlvCiMgJCBleHBvcnQgRFJPTkVfVE9LRU49PHRva2VuPgojICQgZHJvbmUgc2lnbiB2bXdhcmUvdmljLXByb2R1Y3QKIyBUaGUgc2VjcmV0cyBmaWxlIGlzIGluIG91ciBsb2NhbCBnaXQgcmVwby4gIEFzayBtaGFnZW4gZm9yIGFjY2Vzcy4KLS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS92bXdhcmUvdmljLXByb2R1Y3QKICAgIApwaXBlbGluZToKICBjbG9uZToKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgdGFnczogdHJ1ZQogICAgcmVjdXJzaXZlOiBmYWxzZQoKICBkaW52LWJ1aWxkOgogICAgZW52aXJvbm1lbnQ6CiAgICAgIERPQ0tFUl9IT1NUOiB0Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgaW1hZ2U6IGRvY2tlcjpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBwcwogICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKICAgICAgLSBkaW52L2NpLnNoIGJ1aWxkCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgZXZlbnQ6IFtwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudF0KCiAgZGludi1wdXNoOgogICAgZW52aXJvbm1lbnQ6CiAgICAgIERPQ0tFUl9IT1NUOiB0Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgaW1hZ2U6IGRvY2tlcjpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBwcwogICAgICAtIGFwayBhZGQgLS11cGRhdGUgYmFzaCBnaXQKICAgICAgLSBkaW52L2NpLnNoIHB1c2gKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIHJlcG86IHZtd2FyZS92aWMtcHJvZHVjdAogICAgICBldmVudDogW3B1c2gsIHRhZywgZGVwbG95bWVudF0KCiAgcGlwZWxpbmU6CiAgIGNsb25lOgogICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgIHRhZ3M6IHRydWUKICAgICByZWN1cnNpdmU6IGZhbHNlCgogIHVuaWZpZWQtb3ZhLWJ1aWxkOiAKICAgIGltYWdlOiBnY3IuaW8vZW1pbmVudC1uYXRpb24tODczMTcvdmljLWludGVncmF0aW9uLXRlc3Q6MS4zMgogICAgcHVsbDogdHJ1ZQogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgICBPVkFfQlVJTERfU1NIX0tFWTogJHtPVkFfQlVJTERfU1NIX0tFWX0KICAgICAgIE9WQV9CVUlMRF9NQUNISU5FX0lQOiAke09WQV9CVUlMRF9NQUNISU5FX0lQfQogICAgICAgT1ZBX0JVSUxEX1VTRVI6ICR7T1ZBX0JVSUxEX1VTRVJ9CiAgICAgICBQQUNLRVJfRVNYX0hPU1Q6ICR7UEFDS0VSX0VTWF9IT1NUfQogICAgICAgUEFDS0VSX1VTRVI6ICR7UEFDS0VSX1VTRVJ9CiAgICAgICBCVUlMRF9QT1JUR1JPVVA6ICR7QlVJTERfUE9SVEdST1VQfQogICAgICAgUEFDS0VSX1BBU1NXT1JEOiAke1BBQ0tFUl9QQVNTV09SRH0KICAgICAgIEJVSUxEX1ZJQ0VOR0lORV9SRVZJU0lPTjogJHtCVUlMRF9WSUNFTkdJTkVfUkVWSVNJT059CiAgICAgICBEUk9ORV9USU1FT1VUOiAke0RST05FX1RJTUVPVVR9CiAgICAgICBEUk9ORV9USU1FT1VUX0lOQUNUSVZJVFk6ICR7RFJPTkVfVElNRU9VVF9JTkFDVElWSVRZfQogICAgY29tbWFuZHM6CiAgICAgIC0ga2V5ZmlsZT0ib3ZhX2lkX3JzYSIKICAgICAgLSBlY2hvICRPVkFfQlVJTERfU1NIX0tFWSA-ICRrZXlmaWxlCiAgICAgIC0gY2htb2QgNjAwICRrZXlmaWxlCiAgICAgIC0gaW5zdGFsbGVyL3NjcmlwdHMvb3ZhLXNzaC1idWlsZC5zaCAka2V5ZmlsZQoKICBidW5kbGU6CiAgICAgaW1hZ2U6IGhhcmJvci5jaS5kcm9uZS5sb2NhbC9saWJyYXJ5L2dvbGFuZzoxLjgKICAgICBwdWxsOiB0cnVlCiAgICAgY29tbWFuZHM6CiAgICAgICAtIG1rZGlyIGJ1bmRsZQogICAgICAgLSBjcCBiaW4vdmljLSoub3ZhIGJ1bmRsZQogICAgICAgLSBscyAtYWwgYnVuZGxlCgogIHB1Ymxpc2gtZ2NzLWJ1aWxkczoKICAgICBpbWFnZTogbWFwbGFpbi9kcm9uZS1nY3M6bGF0ZXN0CiAgICAgcHVsbDogdHJ1ZQogICAgIHNvdXJjZTogYnVuZGxlCiAgICAgdGFyZ2V0OiB2aWMtcHJvZHVjdC1vdmEtYnVpbGRzCiAgICAgYWNsOgogICAgICAgLSBhbGxVc2VyczpSRUFERVIKICAgICBjYWNoZV9jb250cm9sOiBwdWJsaWMsbWF4LWFnZT0zNjAwCiAgICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgcmVwbzogdm13YXJlL3ZpYy1wcm9kdWN0CiAgICAgIHN0YXR1czogc3VjY2VzcwoKICBwdWJsaXNoLWdjcy1yZWxlYXNlczoKICAgICBpbWFnZTogbWFwbGFpbi9kcm9uZS1nY3M6bGF0ZXN0CiAgICAgcHVsbDogdHJ1ZQogICAgIHNvdXJjZTogYnVuZGxlCiAgICAgdGFyZ2V0OiB2aWMtcHJvZHVjdC1vdmEtcmVsZWFzZXMKICAgICBhY2w6CiAgICAgICAtIGFsbFVzZXJzOlJFQURFUgogICAgIGNhY2hlX2NvbnRyb2w6IHB1YmxpYyxtYXgtYWdlPTM2MDAKICAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICByZXBvOiB2bXdhcmUvdmljLXByb2R1Y3QKICAgICAgc3RhdHVzOiBzdWNjZXNzCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjpkaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBwdWxsOiB0cnVlCg.biy-9N5X78qmSGZqdqi1oXsFETmZmA-NGIyF8nU1xZ4